@page "/"
@inject NaverWebtoonDownloader.Apis.NaverWebtoonApi api
@inject HttpClient client
@inject IJSRuntime JSRuntime
@using NaverWebtoonDownloader.Entities.Naver

<MudContainer MaxWidth="MaxWidth.False">
    <MudTabs @bind-ActivePanelIndex="SelectedIndex" MinimumTabWidth="20px" Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
        <MudTabPanel Text="일" />
        <MudTabPanel Text="월"/>
        <MudTabPanel Text="화" />
        <MudTabPanel Text="수" />
        <MudTabPanel Text="목" />
        <MudTabPanel Text="금" />
        <MudTabPanel Text="토" />
    </MudTabs>
    <MudAutocomplete T="string" Label="웹툰 제목" @bind-Value="searchValue" SearchFunc="@Search"
                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                     CoerceText="@coerceText" CoerceValue="@coerceValue"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    <MudGrid Class="pt-3" Spacing="3" Justify="Justify.Center">
        @for(int i = 0; i < Webtoons.Count; i++)
        {
            var webtoon = Webtoons[i];
            <MudItem>
                <MudPaper Class="mud-card-hover" Style="max-width: 90px; padding: 0; overflow: hidden;" Elevation="0">
                    <MudLink Href="@($"/download?webtoonId={webtoon.ID}")">
                        <div Style="position: relative;">
                            <MudImage Src="@webtoon.Thumbnail" Alt="@webtoon.Title" Style="width: 90px; height: 120px;" />
                        </div>
                    </MudLink>
                    <div Style="padding: 3px;">
                        <MudText Style="font-size: 0.8rem; font-weight:600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            @webtoon.Title
                        </MudText>
                        <MudText Style="font-size: 0.7rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            @string.Join(", ", webtoon.Authors)
                        </MudText>
                    </div>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private DayOfWeek _selectedDay = DateTime.Now.DayOfWeek;
    private int SelectedIndex
    {
        get
        {
            return (int)_selectedDay;
        }
        set
        {
            _selectedDay = (DayOfWeek)value;
            DaySelected(_selectedDay);
        }
    }
    private List<Webtoon> Webtoons  = new List<Webtoon>();
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string searchValue = "";

    private bool isFirstLoad = true;
    protected override async Task OnInitializedAsync()
    {
        await DaySelected(_selectedDay);
        if (isFirstLoad)
        {
            _ = Task.Run(async () =>
            {
                var req = new HttpRequestMessage(HttpMethod.Get, "https://raw.githubusercontent.com/woorim02/Naver-Webtoon-Downloader/master/version.txt");
                var res = await client.SendAsync(req);
                if (res.IsSuccessStatusCode)
                {
                    string ver = await res.Content.ReadAsStringAsync();
                    var comp = AppInfo.Current.Version.CompareTo(ver);
                    if (comp < 0)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"최신 버전 v{ver}이 존재합니다.");
                    }
                }
                isFirstLoad = false;
            });
        }
    }

    private async Task DaySelected(DayOfWeek day)
    {
        try
        {
            Console.WriteLine("홈페이지 로딩");
            Webtoons = await api.GetWebtoonsAsync(day);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"예외 발생: {ex.Message}");
        }
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return new string[0];
        Webtoons = await api.GetWebtoonsAsync(value);
        StateHasChanged();

        return new string[0];
    }
}