@page "/download/list"
@inject NavigationManager Navigation
@inject AppDbContext DbContext
@inject NaverWebtoonDownloader.Apis.NaverWebtoonApi api
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject IServiceProvider ServiceProvider
@inject NaverWebtoonDownloader.Services.WebtoonDownloadService Service

@using Microsoft.EntityFrameworkCore
@using NaverWebtoonDownloader
@using NaverWebtoonDownloader.Data
@using NaverWebtoonDownloader.Entities.Naver
@using NaverWebtoonDownloader.Models
@using NaverWebtoonDownloader.Services
@using System.ComponentModel

@implements IDisposable

<MudDataGrid Class="h-100" T="WebtoonDownloadStatus" MultiSelection="true" Dense="true" Striped="true" Bordered="true" Hover="true"
             Items="@Service.WebtoonDownloadStatuses">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Style="font-weight:600">다운로드 목록</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(Service.IsRunning ? Icons.Material.Filled.Pause : @Icons.Material.Filled.PlayArrow)" Color="Color.Primary" OnClick="(e)=>OnControlButtonClicked()"></MudIconButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Title" Title="웹툰" CellStyle="font-weight: 700;"/>
        <PropertyColumn Property="x => JoinAuthors(x.Authors)" Title="작가" />
        <PropertyColumn Property="x => x.LatestEpisodeTitle" Title="최신 회차" />
        <PropertyColumn Property="x => x.Episodes.Count()" Title="총 회차수" />
        <TemplateColumn Title="진행 상황">
            <CellTemplate>
                <div style="position: relative; width: 100%;">
                    <MudProgressLinear Value="@(context.Item.Progress * 100)" Style="height: 20px;" Color="Color.Primary"/>

                    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
                        @context.Item.DownLoadedImages / @context.Item.TotalImages
                    </div>
                </div>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.StatusText" Title="상태" />
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="padding:0" Color="Color.Error" OnClick="(e)=>OnDeleteButtonClicked(context.Item)"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private readonly object _lock = new object();
    private bool _isPendingUpdate;

    private async void StateHasChangedHandler(object? obj, PropertyChangedEventArgs arg)
    {
        lock (_lock)
        {
            if (_isPendingUpdate)
            {
                return;
            }

            _isPendingUpdate = true;
        }

        // Throttle 적용: 일정 시간 후 UI 갱신을 한 번만 실행
        await Task.Delay(100); // 100ms 대기 (조정 가능)
        await InvokeAsync(() =>
        {
            StateHasChanged();
            lock (_lock)
            {
                _isPendingUpdate = false;
            }
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await Service.OnInitializedAsync();

        Service.PropertyChanged += StateHasChangedHandler;
        foreach (var item in Service.WebtoonDownloadStatuses) 
        {
            item.PropertyChanged += StateHasChangedHandler;
        }
    }


    private void OnControlButtonClicked()
    {
        if (Service.IsRunning)
        {
            Service.StopDownload();
            return;
        }
        Service.StartDonwload();
    }

    private async void OnDeleteButtonClicked(WebtoonDownloadStatus webtoonStatus)
    {
        if (Service.IsRunning)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "다운로드 대기열에서 웹툰을 삭제하려면 먼저 다운로드를 중지해주세요.");
            return;
        }
        var parameters = new DialogParameters
        {
            { "ContentText", "다운로드 대기열에서 웹툰을 삭제할까요?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<DialogTemplate>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            Service.WebtoonDownloadStatuses.Remove(webtoonStatus);
            var webtoon = await DbContext.NaverWebtoons.FindAsync(webtoonStatus.ID);
            webtoon.IsViewOnly = true;
            DbContext.NaverWebtoons.Update(webtoon);
            await DbContext.SaveChangesAsync();
        }
        StateHasChanged();
    }

    string JoinAuthors(IEnumerable<string> strings)
    => string.Join(", ", strings);

    public void Dispose()
    {
        // 페이지가 종료될 때 이벤트 핸들러 제거
        Service.PropertyChanged -= StateHasChangedHandler;
    }
}
